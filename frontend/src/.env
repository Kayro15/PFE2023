  <Route path="/search/location/:location" element={<Home />} />
            <Route path="/search/tag/:tagFilter" element={<Home />} />
            <Route path="/search/:keyword" element={<Home />} />



            <MenuItem onClick={handleCloseUserMenu}>
                                <Typography textAlign="center"><Link style={{ textDecoration: "none", color: palette.primary.main }} to="/admin/dashboard">Espace Admin</Link></Typography>
                                        </MenuItem>



                                        <Typography variant="body2">
                                                    <Box component="span" sx={{ fontWeight: 700 }}>Title</Box>: {singlejob && singlejob.title}
                                                </Typography>



                                                   <Stack spacing={2} >
                                <Pagination page={pageNumber} count={totalPages === 0 ? 1 : totalPages} onChange={(event, value) => setpageNumber(value)} />
                            </Stack>




                            const columns = [

        {
            field: 'id',
            headerName: 'User ID',
            width: 150,
            editable: true,
        },

        {
            field: 'email',
            headerName: 'E_mail',
            width: 150,
        },
        
        {
            field: 'fullName',
            headerName: 'fullName',
            width: 150,
        },
        {
            field: 'phoneNumber',
            headerName: 'Numéro de téléphone',
            width: 150,
        },

        {
            field: 'role',
            headerName: 'User status',
            width: 150,
            // renderCell: (params) => (
            //     params.row.role === "admin" ? "admin" : "Regular user"
            // )
        },

        {
            field: 'createdAt',
            headerName: 'Creation date',
            width: 150,
            renderCell: (params) => (
                moment(params.row.createdAt).format('YYYY-MM-DD HH:MM:SS')
            )
        },

        {
            field: "Actions",
            width: 300,
            renderCell: (values) => (
                <Box sx={{ display: "flex", justifyContent: "space-between", width: "170px" }}>
                    <Button variant="contained"><Link style={{ color: "white", textDecoration: "none" }} to={`/admin/edit/user/${values.row.id}`}>Edit</Link></ Button>
                   
                    < Button onClick={(e) => deleteUserById(e, values.row.id)} variant="contained" color="error">Delete</ Button>
                    
                </Box>
            )
        }
    ];

    
        return (
            <>
              <Box>
          
                <Typography variant="h4" sx={{ color: "white", pb: 3 }}>
                  All users
                </Typography>
                <Box sx={{ pb: 2, display: "flex", justifyContent: "right" }}>
                  <Button variant='contained' color="success" startIcon={<AddIcon />}> Create user</Button>
                </Box>
                <Paper sx={{ bgcolor: "secondary.midNightBlue" }} >
                        <DataGrid
                    rows={data1}
                    columns={columns}
                    pageSize={pageSize}
                    rowsPerPageOptions={[3, 5, 10]}
                    pagination
                    onPageChange={(params) => {
                      setPageNumber(params.page + 1);
                    }}
                    paginationMode="server"
                    rowCount={totalPages * pageSize}
                    getRowId={(row) => row.id}
                    components={{
                      Toolbar: GridToolbar,
                    }}
                  />
                  <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
                    <Pagination count={totalPages} color="primary" onChange={(event, value) => setPageNumber(value)} />
                  </Box>
                </Paper>
              </Box>
            </>
          );












             {singlejob.tag.map((skill) => (
              <Chip label={skill} style={{ marginRight: "2px" }} />
            ))}
                    </Grid>





                    // // import React, { useState } from 'react';
// // import axios from 'axios';
// // import { Button } from '@mui/material';

// // const ResumeForm = () => {
// //   const [Skills, setSkills] = useState([]);
// //   const [degrees, setDegrees] = useState([]);
// //   const [majors, setMajors] = useState([]);

// //   function handleFileChange(event) {
// //     const formData = new FormData();
// //     formData.append('resume', event.target.files[0]);

// //     axios.post('http://localhost:3002/extract_resume_entities', formData, {
// //       headers: {
// //         'Content-Type': 'multipart/form-data',
// //       }
// //     })
// //         .then(response => {
// //         console.log(response)
// //             if (response.data.Skills) { setSkills(response.data.Skills); }
// //             if (response.data.degrees) { setDegrees(response.data.degrees) };
// //             if (response.data['Acceptable majors']) { setMajors(response.data['Acceptable majors']) };
// //     })
// //     .catch(error => {
// //       console.log(error);
// //     });
// //   }

// //   return (
// //     <div>
// //       <label>
// //         Skills:
// //         <input type="text" value={Skills ? Skills.join(', ') : ''} readOnly />
// //       </label>
// //       <label>
// //         Degrees:
// //         <input type="text" value={degrees ? degrees.join(', ') : ''} readOnly />
// //       </label>
// //       <label>
// //         Majors:
// //         <input type="text" value={majors ? majors.join(', ') : ''} readOnly />
// //       </label>
// //       <input
// //   style={{ display: 'none' }}
// //   id="raised-button-file"
// //   multiple
// //               type="file"
// //               onChange={handleFileChange}
// // />
// // <label htmlFor="raised-button-file">
// //   <Button variant="raised" component="span" >
// //     Upload Your
// //   </Button>
// // </label>
// //     </div>
// //   );
// // }
// // export default  ResumeForm;








    axios.post("http://localhost:3000/api/users/uploadpdf", formData, {
        headers: {
          "content-Type": "multipart/form-data",
        },
      })
      .then((response) => {
        console.log(response);
  
      })
      .catch((error) => {
        console.log(error);
      });